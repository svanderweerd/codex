{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 This is my digital garden . This is where I write. Keep track of my thoughts, be it lingering or active ones. Write down ideas, concepts and topics that interest me or that I might need in the future. In the past I've tried to take notes in a notebook, on my ipad, but also using third party applications such as Obsidian and Notion . Alas, as time passes, I find myself incapable of actively maintaining either one of them, or extract meaningful and longterm value from them. The personal notebook or Ipad notes become cluttered and unorganized, losing my motivation to use it as a personal library. Similar feelings arose when using Notion.so. Building comprehensive tables, code snippets, and referring to other pages often became a mess as well. I found that Obisidan grew on me - I even purschased a yearly subscription to support the developers. It has a steep learning curve, but eventually I got the hang of it. Unfortunately, this become somewhat difficult for me to maintain as well: it is self hosted on my laptop, which I don't all the time. Instead, I often work from devices that are provided by my clients, making it difficult to actively work in Obsidian. Additionally, I can't seem to use Obsidian for light-hearted topics such as fitness, or use it to put in my fleeting notes. I can't shake the feeling that I need to use Obsidian for academic grade documentation only, or use it to document advanced topics. This ultimately led me back to old school note-taking, scattering my thoughts all over the place (Notion, Obsidian, physical notebooks, and Apple Notes). With digital garden, I embark on my next journey of collecting and maintaining my thoughts; a backup of my brains, so to speak. As Gwern put it: The goal of these pages is not to be a model of concision, maximizing entertainment value per word, or to preach to a choir by elegantly repeating a conclusion. Rather, I am attempting to explain things to my future self, who is intelligent and interested, but has forgotten. What I am doing is explaining why I decided what I did to myself and noting down everything I found interesting about it for future reference. I hope my other readers, whomever they may be, might find the topic as interesting as I found it, and the essay useful or at least entertaining\u2013but the intended audience is my future self. Principles \u00b6 Based on Gwern's long site principle . Heavily inspired by Lyz Digital Garden .","title":"Introduction"},{"location":"#introduction","text":"This is my digital garden . This is where I write. Keep track of my thoughts, be it lingering or active ones. Write down ideas, concepts and topics that interest me or that I might need in the future. In the past I've tried to take notes in a notebook, on my ipad, but also using third party applications such as Obsidian and Notion . Alas, as time passes, I find myself incapable of actively maintaining either one of them, or extract meaningful and longterm value from them. The personal notebook or Ipad notes become cluttered and unorganized, losing my motivation to use it as a personal library. Similar feelings arose when using Notion.so. Building comprehensive tables, code snippets, and referring to other pages often became a mess as well. I found that Obisidan grew on me - I even purschased a yearly subscription to support the developers. It has a steep learning curve, but eventually I got the hang of it. Unfortunately, this become somewhat difficult for me to maintain as well: it is self hosted on my laptop, which I don't all the time. Instead, I often work from devices that are provided by my clients, making it difficult to actively work in Obsidian. Additionally, I can't seem to use Obsidian for light-hearted topics such as fitness, or use it to put in my fleeting notes. I can't shake the feeling that I need to use Obsidian for academic grade documentation only, or use it to document advanced topics. This ultimately led me back to old school note-taking, scattering my thoughts all over the place (Notion, Obsidian, physical notebooks, and Apple Notes). With digital garden, I embark on my next journey of collecting and maintaining my thoughts; a backup of my brains, so to speak. As Gwern put it: The goal of these pages is not to be a model of concision, maximizing entertainment value per word, or to preach to a choir by elegantly repeating a conclusion. Rather, I am attempting to explain things to my future self, who is intelligent and interested, but has forgotten. What I am doing is explaining why I decided what I did to myself and noting down everything I found interesting about it for future reference. I hope my other readers, whomever they may be, might find the topic as interesting as I found it, and the essay useful or at least entertaining\u2013but the intended audience is my future self.","title":"Introduction"},{"location":"#principles","text":"Based on Gwern's long site principle . Heavily inspired by Lyz Digital Garden .","title":"Principles"},{"location":"health/fitness/","text":"Intro \u00b6 In this section I'll talk about my fitness journey and stuff I have come to learn throughout it. Schemas \u00b6 I currently do full body workouts, split between two different schemas. Each schema has two major exercises: the low bar squat and the deadlift . Each workout also has pull-ups with the purpose of breaking through the plateau of 25 reps in total. Tips & Tricks \u00b6 Squats \u00b6 Squats seem straightforward, but are actually one of the most technical exercises that you can do. To maintain a good technique and optimise for gaining weights, I have created a list op tips and tricks below. These tricks assume a low bar position. Don't use a pad to soften the bar on your back! This impairs your technique and causes you to lift less weight (the pad absorbs part of the weight) Do shoulder rotation exercises before you start. The low bar position might make your shoulder uncomfortable. When your shoulder starts getting too uncomfortable you might naturally bend your wrist to compensate. To counteract that, use a thumbless grip (thumbs over the bar). This allows you to maintain a straight wrist position and lock the bar. Don't move your elbows back and forth. This moves the bar and fucks up your technique. To lock your elbows, act like you are bending the barbell towards ths sides of your chest. Move downwards in a smooth way. Don't go slow, use the momentum in your muscles at the bottom, to go up again. Think of 'bouncing' at the bottom. Use that momentum. Going too slow will impair your technique. When you are at the bottom, move your ass up first. Think of a cord that is attached to your ass. This will train the hamstring and glutes better! youtube vids on squat technique Check our the following videos by Alan Thrall on squat technique: Low bar squat - Rack position & Shoulder warm-ups How to squat - Low bar","title":"Fitness"},{"location":"health/fitness/#intro","text":"In this section I'll talk about my fitness journey and stuff I have come to learn throughout it.","title":"Intro"},{"location":"health/fitness/#schemas","text":"I currently do full body workouts, split between two different schemas. Each schema has two major exercises: the low bar squat and the deadlift . Each workout also has pull-ups with the purpose of breaking through the plateau of 25 reps in total.","title":"Schemas"},{"location":"health/fitness/#tips-tricks","text":"","title":"Tips &amp; Tricks"},{"location":"health/fitness/#squats","text":"Squats seem straightforward, but are actually one of the most technical exercises that you can do. To maintain a good technique and optimise for gaining weights, I have created a list op tips and tricks below. These tricks assume a low bar position. Don't use a pad to soften the bar on your back! This impairs your technique and causes you to lift less weight (the pad absorbs part of the weight) Do shoulder rotation exercises before you start. The low bar position might make your shoulder uncomfortable. When your shoulder starts getting too uncomfortable you might naturally bend your wrist to compensate. To counteract that, use a thumbless grip (thumbs over the bar). This allows you to maintain a straight wrist position and lock the bar. Don't move your elbows back and forth. This moves the bar and fucks up your technique. To lock your elbows, act like you are bending the barbell towards ths sides of your chest. Move downwards in a smooth way. Don't go slow, use the momentum in your muscles at the bottom, to go up again. Think of 'bouncing' at the bottom. Use that momentum. Going too slow will impair your technique. When you are at the bottom, move your ass up first. Think of a cord that is attached to your ass. This will train the hamstring and glutes better! youtube vids on squat technique Check our the following videos by Alan Thrall on squat technique: Low bar squat - Rack position & Shoulder warm-ups How to squat - Low bar","title":"Squats"},{"location":"health/sleep/","text":"Sleep is a naturally recurring state of mind and body, characterized by altered consciousness, relatively inhibited sensory activity, reduced muscle activity and inhibition of nearly all voluntary muscles during rapid eye movement (REM) sleep,and reduced interactions with surroundings. Distinguished from wakefulness by a decreased ability to react to stimuli. References This section is mostly extracted from Lyz's article on Sleep , which in turn is based on the why we sleep book by Matthew Walker .","title":"Sleep"},{"location":"setup-docs/getting-started/","text":"Getting started with Mkdocs \u00b6 This page explains how to use MkDocs and host it on Github Pages. Create mkdocs site \u00b6 pip3 install mkdocs installs the mkdocs package to generate python based static sites. mkdocs new [site-name] creates a new project with the correct set-up. mkdocs serve - Start the live-reloading docs server. mkdocs build subsequently generates your static pages and places the files in /sites . Make sure to include this in your .gitignore file. Setting up a Python environment \u00b6 Here we explain how to set up a virtual environment using pyenv and use requirements.txt to keep track of our dependencies. Instead of using pyenv you can also directly start with Poetry. Further down this guide we explain the steps regarding a Poetry set up. setup a python environment ( pyenv virtualenv [environmentName] ) and activate it with pyenv activate [environmentName] . Install packages and plugins accordingly. Run pip freeze > requirements.txt to output your deps into requirements.txt . Add .venv to your .gitignore file. Host on gh pages \u00b6 Create a new repository in Github (empty one). Perform git init in your local mkdocs folder (the root folder that stores the mkdocs.yml file). The usual stuff (git add, git commit, git remote add origin [remote-url] and git push -u origin main). Now you need to perform the mkdocs gh-deploy command in your local mkdocs project. This creates a Git branch names gh-pages for Github Pages to pick up your site. Running this command will generate the static website. Rather than outputting the files in the site folder as we saw in the previous post, the website will be saved in a new branch named gh-pages and a push of this branch is done towards GitHub. If you go to the Actions tab on the GitHub repository, you will see GitHub automatically picking up the new gh-pages branch and deploying it to GitHub pages. Now your site is hosted on github pages accordingly. Everything has been set up! Automated deployments \u00b6 So far I have described how to manually deploy your mkdocs site to Github Pages. The next steps explain how you can do this automatically through Github Actions. Go to your Github repo and then to Actions menu. Click on New workflow and select the suggested workflow (simple workflow). This will generate a new file called blank.yml in the .github/workflows directory. See the example below for the changes that we conducted on the template file. I suggest to copy this over. Please be mindful of your default branch's name! If you have master , make sure to reflect that in the yaml file below as well. --- name : CI on : push : branches : [ \"main\" ] pull_request : branches : [ \"main\" ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch : jobs : build : runs-on : ubuntu-latest steps : # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses : actions/checkout@v3 with : fetch-depth : 0 - name : Set up python uses : actions/setup-python@v4 with : python-version : '3.10' - name : Install dependencies run : | python3 -m pip install --upgrade pip python3 -m pip install -r requirements.txt - name : Build site run : mkdocs gh-deploy --force --clean --verbose Change the file name to gh-pages.yml and make sure to commit this change to the default branch. Remember that the gh-pages branch will be generated by MkDocs, and we never want to either check out this branch locally or modify it manually. Now you have a minimal set-up for deploying your site through Github Actions automatically. The next steps refines our Github Workflow approach. These steps are not really needed if you don't want to. You can continue using pip3 with pyenv (or venv) for dependency and environment management, instead of poetry. You may also decide to add a Deploy job without integrating with Poetry all together. You simply change the yml file as follows: # I will not include the stuff that won't be changed - name : Build site run : mkdocs build --verbose # here I have updated the code from gh-deploy to build # When you replace gh-deploy, you need to add the step below in order to push the site to gh-pages: - name : Deploy uses : peaceiris/actions-gh-pages@v3 if : ${{ github.ref == 'refs/heads/main' }} with : deploy_key : ${{ secrets.ACTIONS_DEPLOY_KEY }} # ----- SEE NEXT SECTION FOR DEPLOYMENT KEYS! ----- publish_dir : ./site Refining Github Workflow \u00b6 After our first deployment, we do a git fetch and git pull in our local project. This will update our local folder and adds the newly created contents inside the .github directory. Before we use Poetry locally, we first need to make sure that we even have a Poetry environment and pyproject. toml file in our root directory. We run poetry init , and install the dependencies that are listed in our requirements.txt file. Now we tweak the gh-pages.yml file as follows: --- name : CI on : push : branches : [ \"main\" ] pull_request : branches : [ \"main\" ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch : jobs : build : runs-on : ubuntu-latest steps : # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses : actions/checkout@v3 with : fetch-depth : 0 - name : Set up python uses : actions/setup-python@v4 with : python-version : '3.10' - name : Install Poetry uses : snok/install-poetry@v1 with : virtualenvs-create : true virtualenvs-in-project : true installer-parallel : true - name : Load cached venv id : cached-poetry-dependencies uses : actions/cache@v3 with : path : .venv key : venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }} - name : Install dependencies if cache doesnt exist if : steps.cached-poetry-dependencies.outputs.cache-hit != 'true' run : poetry install --no-interaction --no-root - name : Install project run : poetry install --no-interaction --no-root - name : Make the site run : poetry run mkdocs build --verbose # run: poetry run mkdocs gh-deploy --force --clean --verbose - name : Deploy uses : peaceiris/actions-gh-pages@v3 if : ${{ github.ref == 'refs/heads/main' }} with : deploy_key : ${{ secrets.ACTIONS_DEPLOY_KEY }} publish_dir : ./site As shown above, we add a couple of jobs that take care of installing Poetry and our project dependencies. We also replace our run command in the Make the site job: we add poetry but also replace gh-deploy with build . Again, you may choose to keep poetry run mkdocs gh-deploy . Doing so, renders the job Deploy redundant. I suggest to remove that job accordingly. Since we are newly introducing Poetry to our pipeline, it might be good to first test if this is integrated correctly, and we don't experience any issues. If everything is fine, we can work on the next step. Deploy job \u00b6 Now that we don't use the gh-deploy functionality provided by MkDocs , we need to add another job that takes care of pushing our site to the gh-pages branch. That's where the Deploy job comes in. You'll notice the following parameter: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} . Because we don't make use of the gh-deploy functionality, we need to make use of Github Runners : agents that are used to deploy code to certain environments. In our case, it is the gh-pages environment (i.e., branch). However, we need to properly authenticate the Runner otherwise it will not be able to perform write operations, thus deploying our site. To ensure that the Runner is able to authenticate, we make use of deploy keys and add them to our Github project. See the steps below for doing this: on your device, go to .ssh directory and run: ssh-keygen -t ed25519 -C \" $( git config user.email ) \" -f [ ProjectName ] -N \"\" The [name] is the name that is used to write the public and private key files. I suggest to use the name of your project. This command generates a private and public key using the ed25519 algorithm. Go to your Github project settings > deploy keys and click on add deploy key title = Public key of ACTIONS_DEPLOY_KEY paste the contents of your [ProjectName].pub file into this field. This is your public key that you just generated. Go to Github project settings > Secrets > Actions and click on new repository secret secret name = ACTIONS_DEPLOY_KEY > you set this as title, since you refer to this variable name in your gh-pages.yml file ( deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} ) paste the contents of your [ProjectName] file in the .ssh folder. This is the private key that you just generated. Now you are all set. Now you can push your changes to your Github default branch. If there are no unexpected issues, Github will automatically deploy your changes to the Github Pages site, based on your workflow. References \u00b6 See the links below for guides and other docs that helped me understand Mkdocs and deploying to Github Pages: Creating a documentation site with mkdocs Hosting a MkDocs-driven documentation site on GitHub Pages Deploying a Mkdocs site with Github Actions","title":"Getting started"},{"location":"setup-docs/getting-started/#getting-started-with-mkdocs","text":"This page explains how to use MkDocs and host it on Github Pages.","title":"Getting started with Mkdocs"},{"location":"setup-docs/getting-started/#create-mkdocs-site","text":"pip3 install mkdocs installs the mkdocs package to generate python based static sites. mkdocs new [site-name] creates a new project with the correct set-up. mkdocs serve - Start the live-reloading docs server. mkdocs build subsequently generates your static pages and places the files in /sites . Make sure to include this in your .gitignore file.","title":"Create mkdocs site"},{"location":"setup-docs/getting-started/#setting-up-a-python-environment","text":"Here we explain how to set up a virtual environment using pyenv and use requirements.txt to keep track of our dependencies. Instead of using pyenv you can also directly start with Poetry. Further down this guide we explain the steps regarding a Poetry set up. setup a python environment ( pyenv virtualenv [environmentName] ) and activate it with pyenv activate [environmentName] . Install packages and plugins accordingly. Run pip freeze > requirements.txt to output your deps into requirements.txt . Add .venv to your .gitignore file.","title":"Setting up a Python environment"},{"location":"setup-docs/getting-started/#host-on-gh-pages","text":"Create a new repository in Github (empty one). Perform git init in your local mkdocs folder (the root folder that stores the mkdocs.yml file). The usual stuff (git add, git commit, git remote add origin [remote-url] and git push -u origin main). Now you need to perform the mkdocs gh-deploy command in your local mkdocs project. This creates a Git branch names gh-pages for Github Pages to pick up your site. Running this command will generate the static website. Rather than outputting the files in the site folder as we saw in the previous post, the website will be saved in a new branch named gh-pages and a push of this branch is done towards GitHub. If you go to the Actions tab on the GitHub repository, you will see GitHub automatically picking up the new gh-pages branch and deploying it to GitHub pages. Now your site is hosted on github pages accordingly. Everything has been set up!","title":"Host on gh pages"},{"location":"setup-docs/getting-started/#automated-deployments","text":"So far I have described how to manually deploy your mkdocs site to Github Pages. The next steps explain how you can do this automatically through Github Actions. Go to your Github repo and then to Actions menu. Click on New workflow and select the suggested workflow (simple workflow). This will generate a new file called blank.yml in the .github/workflows directory. See the example below for the changes that we conducted on the template file. I suggest to copy this over. Please be mindful of your default branch's name! If you have master , make sure to reflect that in the yaml file below as well. --- name : CI on : push : branches : [ \"main\" ] pull_request : branches : [ \"main\" ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch : jobs : build : runs-on : ubuntu-latest steps : # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses : actions/checkout@v3 with : fetch-depth : 0 - name : Set up python uses : actions/setup-python@v4 with : python-version : '3.10' - name : Install dependencies run : | python3 -m pip install --upgrade pip python3 -m pip install -r requirements.txt - name : Build site run : mkdocs gh-deploy --force --clean --verbose Change the file name to gh-pages.yml and make sure to commit this change to the default branch. Remember that the gh-pages branch will be generated by MkDocs, and we never want to either check out this branch locally or modify it manually. Now you have a minimal set-up for deploying your site through Github Actions automatically. The next steps refines our Github Workflow approach. These steps are not really needed if you don't want to. You can continue using pip3 with pyenv (or venv) for dependency and environment management, instead of poetry. You may also decide to add a Deploy job without integrating with Poetry all together. You simply change the yml file as follows: # I will not include the stuff that won't be changed - name : Build site run : mkdocs build --verbose # here I have updated the code from gh-deploy to build # When you replace gh-deploy, you need to add the step below in order to push the site to gh-pages: - name : Deploy uses : peaceiris/actions-gh-pages@v3 if : ${{ github.ref == 'refs/heads/main' }} with : deploy_key : ${{ secrets.ACTIONS_DEPLOY_KEY }} # ----- SEE NEXT SECTION FOR DEPLOYMENT KEYS! ----- publish_dir : ./site","title":"Automated deployments"},{"location":"setup-docs/getting-started/#refining-github-workflow","text":"After our first deployment, we do a git fetch and git pull in our local project. This will update our local folder and adds the newly created contents inside the .github directory. Before we use Poetry locally, we first need to make sure that we even have a Poetry environment and pyproject. toml file in our root directory. We run poetry init , and install the dependencies that are listed in our requirements.txt file. Now we tweak the gh-pages.yml file as follows: --- name : CI on : push : branches : [ \"main\" ] pull_request : branches : [ \"main\" ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch : jobs : build : runs-on : ubuntu-latest steps : # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses : actions/checkout@v3 with : fetch-depth : 0 - name : Set up python uses : actions/setup-python@v4 with : python-version : '3.10' - name : Install Poetry uses : snok/install-poetry@v1 with : virtualenvs-create : true virtualenvs-in-project : true installer-parallel : true - name : Load cached venv id : cached-poetry-dependencies uses : actions/cache@v3 with : path : .venv key : venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }} - name : Install dependencies if cache doesnt exist if : steps.cached-poetry-dependencies.outputs.cache-hit != 'true' run : poetry install --no-interaction --no-root - name : Install project run : poetry install --no-interaction --no-root - name : Make the site run : poetry run mkdocs build --verbose # run: poetry run mkdocs gh-deploy --force --clean --verbose - name : Deploy uses : peaceiris/actions-gh-pages@v3 if : ${{ github.ref == 'refs/heads/main' }} with : deploy_key : ${{ secrets.ACTIONS_DEPLOY_KEY }} publish_dir : ./site As shown above, we add a couple of jobs that take care of installing Poetry and our project dependencies. We also replace our run command in the Make the site job: we add poetry but also replace gh-deploy with build . Again, you may choose to keep poetry run mkdocs gh-deploy . Doing so, renders the job Deploy redundant. I suggest to remove that job accordingly. Since we are newly introducing Poetry to our pipeline, it might be good to first test if this is integrated correctly, and we don't experience any issues. If everything is fine, we can work on the next step.","title":"Refining Github Workflow"},{"location":"setup-docs/getting-started/#deploy-job","text":"Now that we don't use the gh-deploy functionality provided by MkDocs , we need to add another job that takes care of pushing our site to the gh-pages branch. That's where the Deploy job comes in. You'll notice the following parameter: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} . Because we don't make use of the gh-deploy functionality, we need to make use of Github Runners : agents that are used to deploy code to certain environments. In our case, it is the gh-pages environment (i.e., branch). However, we need to properly authenticate the Runner otherwise it will not be able to perform write operations, thus deploying our site. To ensure that the Runner is able to authenticate, we make use of deploy keys and add them to our Github project. See the steps below for doing this: on your device, go to .ssh directory and run: ssh-keygen -t ed25519 -C \" $( git config user.email ) \" -f [ ProjectName ] -N \"\" The [name] is the name that is used to write the public and private key files. I suggest to use the name of your project. This command generates a private and public key using the ed25519 algorithm. Go to your Github project settings > deploy keys and click on add deploy key title = Public key of ACTIONS_DEPLOY_KEY paste the contents of your [ProjectName].pub file into this field. This is your public key that you just generated. Go to Github project settings > Secrets > Actions and click on new repository secret secret name = ACTIONS_DEPLOY_KEY > you set this as title, since you refer to this variable name in your gh-pages.yml file ( deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} ) paste the contents of your [ProjectName] file in the .ssh folder. This is the private key that you just generated. Now you are all set. Now you can push your changes to your Github default branch. If there are no unexpected issues, Github will automatically deploy your changes to the Github Pages site, based on your workflow.","title":"Deploy job"},{"location":"setup-docs/getting-started/#references","text":"See the links below for guides and other docs that helped me understand Mkdocs and deploying to Github Pages: Creating a documentation site with mkdocs Hosting a MkDocs-driven documentation site on GitHub Pages Deploying a Mkdocs site with Github Actions","title":"References"},{"location":"setup-docs/tools-plugins/","text":"Tools \u00b6 markdownlint-cli \u00b6 When you have a project with markdown ( .md ) files, or when building documentation sites based on markdown files (e. g., with Mkdocs), you can use markdownlint-cli to improve your markdown code. Install with homebrew: brew install markdownlint-cli It uses a default ruleset to check your files, but you can also tweak that ruleset by including a .markdownlint. yml or .markdownlint.jsonc file in your project's root. In this file you can change the ruleset. See this yml file for an example. This file also explains the rules and their behaviour. template \u00b6 I use the following .markdownlint.yml template: --- default : true # MD003/heading-style/header-style - Heading style MD003 : style : atx # MD004/ul-style - Unordered list style MD004 : style : asterisk # MD007/ul-indent - Unordered list indentation MD007 : indent : 4 # MD013/line-length - Line length MD013 : false # MD025/single-title/single-h1 - Multiple top-level headings # in the same document MD025 : false # MD030/list-marker-space - Spaces after list markers MD030 : ul_multi : 1 ol_multi : 2 # MD035/hr-style - Horizontal rule style MD035 : style : --- # MD046/code-block-style - Code block style MD046 : false pre-commit \u00b6 pre-commit helps you implement checks before committing code. You install it through pip or poetry: poetry add pre-commit . Subsequently, you create a .pre-commit-config.yml file where you include the checks that must be performed. Set up the pre-commit hooks for your project: pre-commit install Now, every time you commit code, the pre-commit hook will check your code based on the checks included in your config file. Manually trigger a pre-commit check: pre-commit run --all-files Plugins \u00b6 There are alot of plugins that you can use when building a doc site with Mkdocs and Material theme. Some of them are listed below. markdown_extensions \u00b6 admonitions \u00b6 Admonitions , also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several types of admonitions and allows for the inclusion and nesting of arbitrary content. To enable this extension, add the following to mkdocs.yml : markdown_extensions : - admonition - pymdownx.details - pymdownx.superfences Admonitions follow a simple syntax: a block starts with !!!, followed by a single keyword used as a type qualifier. The content of the block follows on the next line, indented by four spaces: Note This is a dummy block of type 'note'. Custom title This is a dummy block of type 'note' with a custom title. Info This is a collapsable dummy block of type 'info'. Bug This is a dummy block of type 'bug'. You can do all kinds of stuff with this extension. Check the url above for all the variation you can use.","title":"Tools & plugins"},{"location":"setup-docs/tools-plugins/#tools","text":"","title":"Tools"},{"location":"setup-docs/tools-plugins/#markdownlint-cli","text":"When you have a project with markdown ( .md ) files, or when building documentation sites based on markdown files (e. g., with Mkdocs), you can use markdownlint-cli to improve your markdown code. Install with homebrew: brew install markdownlint-cli It uses a default ruleset to check your files, but you can also tweak that ruleset by including a .markdownlint. yml or .markdownlint.jsonc file in your project's root. In this file you can change the ruleset. See this yml file for an example. This file also explains the rules and their behaviour.","title":"markdownlint-cli"},{"location":"setup-docs/tools-plugins/#template","text":"I use the following .markdownlint.yml template: --- default : true # MD003/heading-style/header-style - Heading style MD003 : style : atx # MD004/ul-style - Unordered list style MD004 : style : asterisk # MD007/ul-indent - Unordered list indentation MD007 : indent : 4 # MD013/line-length - Line length MD013 : false # MD025/single-title/single-h1 - Multiple top-level headings # in the same document MD025 : false # MD030/list-marker-space - Spaces after list markers MD030 : ul_multi : 1 ol_multi : 2 # MD035/hr-style - Horizontal rule style MD035 : style : --- # MD046/code-block-style - Code block style MD046 : false","title":"template"},{"location":"setup-docs/tools-plugins/#pre-commit","text":"pre-commit helps you implement checks before committing code. You install it through pip or poetry: poetry add pre-commit . Subsequently, you create a .pre-commit-config.yml file where you include the checks that must be performed. Set up the pre-commit hooks for your project: pre-commit install Now, every time you commit code, the pre-commit hook will check your code based on the checks included in your config file. Manually trigger a pre-commit check: pre-commit run --all-files","title":"pre-commit"},{"location":"setup-docs/tools-plugins/#plugins","text":"There are alot of plugins that you can use when building a doc site with Mkdocs and Material theme. Some of them are listed below.","title":"Plugins"},{"location":"setup-docs/tools-plugins/#markdown_extensions","text":"","title":"markdown_extensions"},{"location":"setup-docs/tools-plugins/#admonitions","text":"Admonitions , also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several types of admonitions and allows for the inclusion and nesting of arbitrary content. To enable this extension, add the following to mkdocs.yml : markdown_extensions : - admonition - pymdownx.details - pymdownx.superfences Admonitions follow a simple syntax: a block starts with !!!, followed by a single keyword used as a type qualifier. The content of the block follows on the next line, indented by four spaces: Note This is a dummy block of type 'note'. Custom title This is a dummy block of type 'note' with a custom title. Info This is a collapsable dummy block of type 'info'. Bug This is a dummy block of type 'bug'. You can do all kinds of stuff with this extension. Check the url above for all the variation you can use.","title":"admonitions"}]}